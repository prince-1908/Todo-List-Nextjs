"use client";
import { useState, useEffect } from "react";
import { databases } from "@/appwrite-services/appwriteDB";
import config from "@/configuaration/appwriteConfig";
import { ID } from "appwrite";

type Todos = {
	id: string;
	task: string;
	isComplete: boolean;
};

export default function Home() {
	const [task, setTask] = useState<string>("");
	const [todoList, setTodoList] = useState<Todos[]>([]);

	// Add to-do in list
	async function addTodoList() {
		if (task) {
			const todo = {
				id: Math.floor(Math.random() * 10),
				task,
				isComplete: false,
			};
			try {
				const promise = await databases.createDocument(
					config.appwriteDatabaseId, //Database ID
					config.appwriteCollectionId, // Collection ID
					ID.unique(), //Document or todo id uniquely generated by appwrite
					{ task }
				);
				console.log("todo Added Successfully!" + promise);
			} catch (err) {
				console.log("failed to add todo in List!" + err);
			}
			setTask("");
		} else alert(" Add a To Do");
	}

	// remove-todo
	const deleteTodo = async (id: string) => {
		const result = await databases.deleteDocument(
			config.appwriteDatabaseId, // databaseId
			config.appwriteCollectionId, // collectionId
			id // documentId
		);
	};

	// Todo complete toddle
	const todoToodle = async (id: string, isComplete: boolean) => {
		const result = await databases.updateDocument(
			config.appwriteDatabaseId, // databaseId
			config.appwriteCollectionId, // collectionId
			id, // documentId
			{ isComplete: !isComplete } // data (optional)
		);
	};

	useEffect(() => {
		const fetchTodoList = async () => {
			try {
				const result = await databases.listDocuments(
					config.appwriteDatabaseId, // Your database ID
					config.appwriteCollectionId // Your collection ID
				);
				const todos = result.documents.map((todo) => ({
					id: todo.$id, // Appwrite document ID
					task: todo.task, // task field from Appwrite document
					isComplete: todo.isComplete, // isComplete field from Appwrite document
				}));

				setTodoList(todos);
			} catch (error) {
				console.error("Failed to fetch todos from Appwrite:", error);
			}
		};

		fetchTodoList();
	}, [addTodoList, todoToodle, deleteTodo]);

	return (
		<main className="flex flex-col items-center justify-start p-20  h-full ">
			<h1 className="text-blue-400 text-2xl font-semibold">TO-DO List</h1>

			<div className="flex mt-10 w-3/4 ">
				<input
					type="text"
					className="p-2 text-black w-full rounded-s-lg"
					value={task}
					onChange={(e) => {
						setTask(e.target.value);
					}}
				/>
				<button className="bg-purple-500 px-4 text-xl font-semibold text-white rounded-e-lg  hover:bg-purple-900" onClick={addTodoList}>
					ADD
				</button>
			</div>

			<div className=" flex  flex-col  mt-6 w-3/4 ">
				{todoList ? (
					<div className="bg-[#282727] flex flex-col gap-y-4 px-6 p-2 rounded-lg">
						{todoList.map((todo) => (
							<div className="flex   gap-4" key={todo.id}>
								<input type="checkbox" className="w-10" checked={todo.isComplete} onChange={() => todoToodle(todo.id, todo.isComplete)} />
								<p key={todo.id} className={`bg-slate-600 rounded-lg w-full p-2 text-lg text-center text-white ${todo.isComplete ? "line-through " : ""}`}>
									{todo.task}
								</p>
								<button>{"✏️"}</button>
								<button onClick={() => deleteTodo(todo.id)}>{" ❌"}</button>
							</div>
						))}
					</div>
				) : (
					<div>NO</div>
				)}
			</div>
		</main>
	);
}
function unique(): string {
	throw new Error("Function not implemented.");
}
